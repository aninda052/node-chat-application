<%- include('./partials/header.ejs')%>
<div id="chat-container">
  <div id="search-container">
    <input type="text" placeholder="Search" />
  </div>

  <div id="conversation-list">
    <% data.forEach(function(conversation) { %>
    <!-- conversation creator is same to logged in user, so we need to show participant name and avatar -->
    <% if(conversation.creator._id == loggedInUser._id) { %>
    <div
      class="conversation"
      id="<%= conversation._id %>"
      onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant._id %>', '<%= conversation.participant.name %>')"
    >
      <% if (conversation.participant.avatar) { %>
      <img
        src="./uploads/avatars/<%= conversation.participant.avatar %>"
        alt="<%= conversation.participant.name %>"
      />
      <% } else { %>
      <img src="./images/nophoto.png" />
      <% } %>
      <div class="title-text"><%= conversation.participant.name %></div>
      <div class="conversation-date"><%= conversation.last_updated %></div>
    </div>
    <% } else { %>
    <div
      class="conversation"
      onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator._id %>', '<%= conversation.creator.name %>')"
    >
      <% if (conversation.creator.avatar) { %>
      <img
        src="./uploads/avatars/<%= conversation.creator.avatar %>"
        alt="<%= conversation.creator.name %>"
      />
      <% } else { %>
      <img src="./images/nophoto.png" />
      <% } %>
      <div class="title-text"><%= conversation.creator.name %></div>
      <div class="conversation-date"><%= conversation.last_updated %></div>
    </div>
    <% } %> <% }); %>

    <!-- show no conversation placeholder image for 0 conversations -->
    <% if(data && data.length === 0) { %>
    <div class="nothing"><img src="./images/no-conversation.svg" /></div>
    <% } %>
  </div>

  <div id="new-message-container" onclick="openModal()">
    <img src="./images/add.png" style="height: 5rem" alt="Add Conversation" />
  </div>

  <div id="chat-title">
    <span id="conversation-partner"></span>
    <img
      id="delete-conversation"
      src="./images/trash.png"
      alt="Delete Conversation"
    />
  </div>

  <div id="chat-message-list"></div>

  <form id="chat-form" method="post" enctype="multipart/form-data">
    <label for="attachment">
      <img src="./images/attachment.png" alt="Add Attachment" />
    </label>
    <input
      class="hide"
      type="file"
      multiple
      name="attachment"
      id="attachment"
    />
    <input
      type="text"
      name="message"
      placeholder="Type a message"
      autocomplete="off"
    />
    <input id="conversationId" type="hidden" name="conversationId" />
    <input id="recieverId" type="hidden" name="recieverId" />
  </form>
</div>

<%- include('./partials/add-conversation-modal.ejs'); %> <%-
include('./partials/footer.ejs')%>

<!-- import socket io client from cdn -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>

<script>
  const messageContainer = document.querySelector("#chat-message-list");
  const chatTitleContainer = document.querySelector("#conversation-partner");
  const messageForm = document.querySelector("#chat-form");
  const loggedinUserId = getCookie("userid");

  const socket = io("<%= process.env.APP_URL %>", {
    path: "/chat",
    auth: {
      token: getCookie("token"),
    },
  });

  function showMgs(data) {
    // message class
    const messageClass =
      data.message.sender._id === loggedinUserId
        ? "you-message"
        : "other-message";

    // message attachments
    let attachments = '<div class="attachments">';
    if (data.message.attachments && data.message.attachments.length > 0) {
      if (data.message.attachments instanceof Array) {
        data.message.attachments.forEach((attachment) => {
          attachments += `<img src="./uploads/attachments/${attachment}" /> `;
        });
      } else {
      }
    }
    attachments += "</div>";
    let messageHTML;
    // do not show avatar for loggedin user
    if (data.message.sender._id == loggedinUserId._d) {
      messageHTML = `
        <div class="message-row ${messageClass}">
          <div class="message-content">
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(
                data.message.created_at
              ).fromNow()}</div>
          </div>
        </div>`;
    } else {
      const senderAvatar = data.message.sender.avatar
        ? `<img src="./uploads/avatars/${data.message.sender.avatar}" alt="${data.message.sender.name}" />`
        : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;

      messageHTML = `
            <div class="message-row ${messageClass}">
              <div class="message-content">${senderAvatar}
                  <div class="message-text">${data.message.message}</div>
                  ${attachments}
                  <div class="message-time">${moment(
                    data.message.created_at
                  ).fromNow()}</div>
              </div>
            </div>`;
    }
    // append the inoming message to message area as last item
    messageContainer.insertAdjacentHTML("afterbegin", messageHTML);
  }

  async function deleteConversation(conversationId) {
    const response = await fetch(
      `/inbox/delete-conversation/${conversationId}`,
      {
        method: "DELETE",
        headers: {
          Authorization: getCookie("token"),
        },
      }
    );

    const result = await response.json();

    if (result.errors) {
      console.log(result.errors.message);
    } else {
      chatTitleContainer.textContent = "";
      document.getElementById("delete-conversation").removeAttribute("onclick");
      document.getElementById(conversationId).remove();
    }
  }

  async function getMessages(conversationId, participantId, participantName) {
    const response = await fetch(`/inbox/get-message/${conversationId}`, {
      method: "GET",
      headers: {
        Authorization: getCookie("token"),
      },
    });

    const result = await response.json();
    if (result.errors) {
      console.log(result.errors.message);
    } else {
      const messagesFailureToast = Toastify({
        text: "Error loading messages!",
        duration: 1000,
      });

      chatTitleContainer.textContent = participantName;
      messageForm.elements["recieverId"].value = participantId;
      messageForm.elements["conversationId"].value = conversationId;

      document
        .getElementById("delete-conversation")
        .setAttribute("onclick", `deleteConversation('${conversationId}')`);

      if (result.messages) {
        let allMessages = "";
        if (result.messages.length > 0) {
          result.messages.forEach((message) => {
            showMgs({ message });
          });
        } else if (result.messages.length === 0) {
          messageContainer.innerHTML = '<div class="message-row"></div>';
        }
      } else {
        messagesFailureToast.showToast();
      }
    }
  }

  messageForm.onsubmit = (event) => {
    event.preventDefault();
    const attachments = messageForm.elements["attachment"].files;
    const message = messageForm.elements["message"].value;

    if (message || attachments) {
      const sender = {
        name: getCookie("username"),
        avatar: getCookie("avatar"),
        _id: loggedinUserId,
      };

      showMgs({
        message: {
          message: message,
          sender: sender,
          attachments: attachments,
        },
      });
      socket.emit("message", attachments, {
        body: {
          conversationId: messageForm.elements["conversationId"].value,
          recieverId: messageForm.elements["recieverId"].value,
          message: message,
        },
      });
      messageForm.reset();
    }
  };

  socket.on("message", (payload) => {
    showMgs(payload);
  });
</script>

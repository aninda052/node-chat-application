<%- include('./partials/header.ejs')%>
<div id="chat-container">
  <div id="search-container">
    <input type="text" placeholder="Search" />
  </div>

  <div id="conversation-list">
    <% data.forEach(function(conversation) { %>
    <!-- conversation creator is same to logged in user, so we need to show participant name and avatar -->
    <% if(conversation.creator.id == loggedInUser.userid) { %>
    <div
      class="conversation"
      id="<%= conversation._id %>"
      onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')"
    >
      <% if (conversation.participant.avatar) { %>
      <img
        src="./uploads/avatars/<%= conversation.participant.avatar %>"
        alt="<%= conversation.participant.name %>"
      />
      <% } else { %>
      <img src="./images/nophoto.png" />
      <% } %>
      <div class="title-text"><%= conversation.participant.name %></div>
      <div class="conversation-date"><%= conversation.last_updated %></div>
    </div>
    <% } else { %>
    <div
      class="conversation"
      onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')"
    >
      <% if (conversation.creator.avatar) { %>
      <img
        src="./uploads/avatars/<%= conversation.creator.avatar %>"
        alt="<%= conversation.creator.name %>"
      />
      <% } else { %>
      <img src="./images/nophoto.png" />
      <% } %>
      <div class="title-text"><%= conversation.creator.name %></div>
      <div class="conversation-date">
        <%= moment(conversation.last_updated).fromNow() %>
      </div>
    </div>
    <% } %> <% }); %>

    <!-- show no conversation placeholder image for 0 conversations -->
    <% if(data && data.length === 0) { %>
    <div class="nothing"><img src="./images/no-conversation.svg" /></div>
    <% } %>
  </div>

  <div id="new-message-container" onclick="openModal()">
    <img src="./images/add.png" style="height: 5rem" alt="Add Conversation" />
  </div>

  <div id="chat-title">
    <span id="conversation-partner"></span>
    <img
      id="delete-conversation"
      src="./images/trash.png"
      alt="Delete Conversation"
    />
  </div>

  <div id="chat-message-list">
    <div class="none">Start a Conversation</div>
  </div>

  <form id="chat-form" method="post" enctype="multipart/form-data">
    <img src="./images/attachment.png" alt="Add A ttachment" />
    <input type="file" multiple name="attachment" id="attachment" />
    <input
      type="text"
      name="message"
      placeholder="Type a message"
      autocomplete="off"
    />
    <input id="conversationId" type="hidden" name="conversationId" />
  </form>
</div>

<%- include('./partials/add-conversation-modal.ejs'); %> <%-
include('./partials/footer.ejs')%>

<!-- import socket io client from cdn -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>

<script>
  const messageContainer = document.querySelector("#chat-message-list");
  const chatTitleContainer = document.querySelector("#conversation-partner");
  const messageForm = document.querySelector("#chat-form");

  const loggedinUserId = getCookie("userid");

  async function deleteConversation(conversationId) {
    const response = await fetch(
      `/inbox/delete-conversation/${conversationId}`,
      {
        method: "DELETE",
        headers: {
          Authorization: getCookie("token"),
        },
      }
    );

    const result = await response.json();

    if (result.errors) {
      console.log(result.errors.message);
    } else {
      chatTitleContainer.textContent = "";
      document.getElementById("delete-conversation").removeAttribute("onclick");
      document.getElementById(conversationId).remove();
    }
  }

  async function getMessages(conversationId, participantName) {
    const response = await fetch(`/inbox/get-message/${conversationId}`, {
      method: "GET",
      headers: {
        Authorization: getCookie("token"),
      },
    });

    const result = await response.json();
    if (result.errors) {
      console.log(result.errors.message);
    } else {
      const messagesFailureToast = Toastify({
        text: "Error loading messages!",
        duration: 1000,
      });

      chatTitleContainer.textContent = participantName;
      messageForm.elements["conversationId"].value = conversationId;

      // document.getElementById("delete-conversation").click =
      //   deleteConversation(conversationId);

      // document
      //   .getElementById("delete-conversation")
      //   .addEventListener("click", function (conversationId) {
      //     deleteConversation(conversationId);
      //   });

      document
        .getElementById("delete-conversation")
        .setAttribute("onclick", `deleteConversation('${conversationId}')`);

      if (result.messages) {
        let allMessages = "";
        if (result.messages.length > 0) {
          result.messages.forEach((message) => {
            let senderAvatar = message.sender.avatar
              ? `./uploads/avatars/${message.sender.avatar}`
              : "./images/nophoto.png";
            const messageClass =
              message.sender.id === loggedinUserId
                ? "you-message"
                : "other-message";
            const showAvatar =
              message.sender.id === loggedinUserId
                ? ""
                : `<img src="${senderAvatar}" alt="${message.sender.name}" />`;
            // message attachments
            let attachments = '<div class="attachments">';
            if (message.attachment && message.attachment.length > 0) {
              message.attachment.forEach((attachment) => {
                attachments += `<img src="./uploads/attachments/${attachment}" /> `;
              });
            }
            attachments += "</div>";
            // final message html
            let messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
                      ${showAvatar}
                      <div class="message-text">${message.message}</div>
                      ${attachments}
                      <div class="message-time">${moment(
                        message.date_time
                      ).fromNow()}</div>
                    </div></div>`;
            allMessages += messageHTML;
            messageContainer.innerHTML = allMessages;
          });
        } else if (result.messages.length === 0) {
          messageContainer.innerHTML = '<div class="message-row"></div>';
        }
      } else {
        messagesFailureToast.showToast();
      }
    }
  }

  const socket = io("<%= process.env.APP_URL %>", {
    path: "/chat",
    query: {
      userid: loggedinUserId,
    },
  });

  messageForm.onsubmit = (event) => {
    event.preventDefault();
    const attachments = messageForm.elements["attachment"].files;

    socket.emit("message", attachments, {
      body: {
        conversationId: messageForm.elements["conversationId"].value,
        message: messageForm.elements["message"].value,
      },
    });
  };

  socket.on("message", (payload) => {
    console.log(payload);
  });
</script>
